/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  VerifyingPaymaster,
  VerifyingPaymasterInterface,
} from "../../../contracts/paymaster/VerifyingPaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifyingSigner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "getHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    name: "setEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "requiredPreFund",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifyingSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620011b2380380620011b2833981016040819052620000349162000155565b8162000040336200005f565b6200004b81620000af565b506001600160a01b03166080525062000194565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000b9620000db565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146200013a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b6001600160a01b03811681146200015257600080fd5b50565b600080604083850312156200016957600080fd5b825162000176816200013c565b602084015190925062000189816200013c565b809150509250929050565b608051610ffb620001b760003960008181610134015261088b0152610ffb6000f3fe6080604052600436106100e85760003560e01c8063b0d691fe1161008a578063c399ec8811610059578063c399ec8814610269578063d0e30db01461027e578063f2fde38b14610286578063f465c77e146102a657600080fd5b8063b0d691fe146101e6578063bb9fe6bf14610206578063c23a5cea1461021b578063c266f2921461023b57600080fd5b8063584465f2116100c6578063584465f214610173578063715018a6146101935780638da5cb5b146101a8578063a9a23409146101c657600080fd5b80630396cb60146100ed578063205c28781461010257806323d9ac9b14610122575b600080fd5b6101006100fb366004610ce1565b6102d4565b005b34801561010e57600080fd5b5061010061011d366004610d23565b61035d565b34801561012e57600080fd5b506101567f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017f57600080fd5b5061010061018e366004610d4f565b6103cc565b34801561019f57600080fd5b50610100610403565b3480156101b457600080fd5b506000546001600160a01b0316610156565b3480156101d257600080fd5b506101006101e1366004610d6c565b610417565b3480156101f257600080fd5b50600154610156906001600160a01b031681565b34801561021257600080fd5b50610100610431565b34801561022757600080fd5b50610100610236366004610d4f565b61049d565b34801561024757600080fd5b5061025b610256366004610e14565b610520565b60405190815260200161016a565b34801561027557600080fd5b5061025b6105f3565b61010061067e565b34801561029257600080fd5b506101006102a1366004610d4f565b6106dd565b3480156102b257600080fd5b506102c66102c1366004610e51565b610772565b60405161016a929190610e9f565b6102dc6108fc565b6001546040517f0396cb6000000000000000000000000000000000000000000000000000000000815263ffffffff831660048201526001600160a01b0390911690630396cb609034906024016000604051808303818588803b15801561034157600080fd5b505af1158015610355573d6000803e3d6000fd5b505050505050565b6103656108fc565b6001546040517f205c28780000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529091169063205c287890604401600060405180830381600087803b15801561034157600080fd5b6103d46108fc565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61040b6108fc565b6104156000610956565b565b61041f6109b3565b61042b848484846109ca565b50505050565b6104396108fc565b600160009054906101000a90046001600160a01b03166001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561048957600080fd5b505af115801561042b573d6000803e3d6000fd5b6104a56108fc565b6001546040517fc23a5cea0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063c23a5cea90602401600060405180830381600087803b15801561050557600080fd5b505af1158015610519573d6000803e3d6000fd5b5050505050565b6000813560208301356105366040850185610ef4565b604051610544929190610f3b565b60405190819003902061055a6060860186610ef4565b604051610568929190610f3b565b604080519182900382206001600160a01b03909516602083015281019290925260608201526080808201929092529083013560a08083019190915283013560c08083019190915283013560e08083019190915283013561010080830191909152830135610120820152610140015b604051602081830303815290604052805190602001209050919050565b6001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106799190610f4b565b905090565b6001546040517fb760faf90000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063b760faf99034906024016000604051808303818588803b15801561050557600080fd5b6106e56108fc565b6001600160a01b0381166107665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61076f81610956565b50565b606060008061078086610520565b9050366000610793610120890189610ef4565b909250905060006107a5601483610f64565b905080604014806107b65750806041145b61082a576040805162461bcd60e51b81526020600482015260248101919091527f566572696679696e675061796d61737465723a20696e76616c6964207369676e60448201527f6174757265206c656e67746820696e207061796d6173746572416e6444617461606482015260840161075d565b61088061083a8360148187610f85565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061087a9250889150610a129050565b90610a4d565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146108d8576001604051806020016040528060008152509095509550505050506108f4565b6000604051806020016040528060008152509095509550505050505b935093915050565b6000546001600160a01b031633146104155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075d565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546001600160a01b0316331461041557600080fd5b60405162461bcd60e51b815260206004820152600d60248201527f6d757374206f7665727269646500000000000000000000000000000000000000604482015260640161075d565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c016105d6565b6000806000610a5c8585610a73565b91509150610a6981610ab8565b5090505b92915050565b6000808251604103610aa95760208301516040840151606085015160001a610a9d87828585610c1d565b94509450505050610ab1565b506000905060025b9250929050565b6000816004811115610acc57610acc610faf565b03610ad45750565b6001816004811115610ae857610ae8610faf565b03610b355760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161075d565b6002816004811115610b4957610b49610faf565b03610b965760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161075d565b6003816004811115610baa57610baa610faf565b0361076f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161075d565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610c545750600090506003610cd8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610ca8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610cd157600060019250925050610cd8565b9150600090505b94509492505050565b600060208284031215610cf357600080fd5b813563ffffffff81168114610d0757600080fd5b9392505050565b6001600160a01b038116811461076f57600080fd5b60008060408385031215610d3657600080fd5b8235610d4181610d0e565b946020939093013593505050565b600060208284031215610d6157600080fd5b8135610d0781610d0e565b60008060008060608587031215610d8257600080fd5b843560038110610d9157600080fd5b9350602085013567ffffffffffffffff80821115610dae57600080fd5b818701915087601f830112610dc257600080fd5b813581811115610dd157600080fd5b886020828501011115610de357600080fd5b95986020929092019750949560400135945092505050565b60006101608284031215610e0e57600080fd5b50919050565b600060208284031215610e2657600080fd5b813567ffffffffffffffff811115610e3d57600080fd5b610e4984828501610dfb565b949350505050565b600080600060608486031215610e6657600080fd5b833567ffffffffffffffff811115610e7d57600080fd5b610e8986828701610dfb565b9660208601359650604090950135949350505050565b604081526000835180604084015260005b81811015610ecd5760208187018101516060868401015201610eb0565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b6000808335601e19843603018112610f0b57600080fd5b83018035915067ffffffffffffffff821115610f2657600080fd5b602001915036819003821315610ab157600080fd5b8183823760009101908152919050565b600060208284031215610f5d57600080fd5b5051919050565b81810381811115610a6d57634e487b7160e01b600052601160045260246000fd5b60008085851115610f9557600080fd5b83861115610fa257600080fd5b5050820193919092039150565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220a585bbd02b6374f8e3de0fc0761c1e4847611603b4a3cccfa6f9905f1acf3e4264736f6c63430008120033";

type VerifyingPaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifyingPaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerifyingPaymaster__factory extends ContractFactory {
  constructor(...args: VerifyingPaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    _verifyingSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VerifyingPaymaster> {
    return super.deploy(
      _entryPoint,
      _verifyingSigner,
      overrides || {}
    ) as Promise<VerifyingPaymaster>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    _verifyingSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _entryPoint,
      _verifyingSigner,
      overrides || {}
    );
  }
  override attach(address: string): VerifyingPaymaster {
    return super.attach(address) as VerifyingPaymaster;
  }
  override connect(signer: Signer): VerifyingPaymaster__factory {
    return super.connect(signer) as VerifyingPaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifyingPaymasterInterface {
    return new utils.Interface(_abi) as VerifyingPaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerifyingPaymaster {
    return new Contract(address, _abi, signerOrProvider) as VerifyingPaymaster;
  }
}
