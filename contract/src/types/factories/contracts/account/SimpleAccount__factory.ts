/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SimpleAccount,
  SimpleAccountInterface,
} from "../../../contracts/account/SimpleAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "anEntryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "SimpleAccountInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "addDeposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "func",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "dest",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "func",
        type: "bytes[]",
      },
    ],
    name: "executeBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "anOwner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "aggregator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawDepositTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60c06040523060805234801561001457600080fd5b50604051611b19380380611b1983398101604081905261003391610044565b6001600160a01b031660a052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160a051611a3a6100df6000396000818161021701528181610560015281816105e60152818161090a01528181610add01528181610d2e01526110640152600081816103eb01528181610470015281816106900152818161071501526107ff0152611a3a6000f3fe6080604052600436106100d65760003560e01c806352d1902d1161007f578063b0d691fe11610059578063b0d691fe14610208578063b61d27f61461023b578063c399ec881461025b578063c4d66de81461027057600080fd5b806352d1902d146101925780638da5cb5b146101a7578063affed0e0146101df57600080fd5b80634a58db19116100b05780634a58db19146101575780634d44560d1461015f5780634f1ef2861461017f57600080fd5b80630825d1fc146100e257806318dfb3c7146101155780633659cfe61461013757600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506101026100fd3660046115c0565b610290565b6040519081526020015b60405180910390f35b34801561012157600080fd5b5061013561013036600461166c565b6102d7565b005b34801561014357600080fd5b506101356101523660046116d8565b6103e1565b61013561055c565b34801561016b57600080fd5b5061013561017a3660046116f5565b6105dc565b61013561018d366004611737565b610686565b34801561019e57600080fd5b506101026107f2565b3480156101b357600080fd5b506001546101c7906001600160a01b031681565b6040516001600160a01b03909116815260200161010c565b3480156101eb57600080fd5b506000546201000090046bffffffffffffffffffffffff16610102565b34801561021457600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101c7565b34801561024757600080fd5b506101356102563660046117fb565b6108b7565b34801561026757600080fd5b50610102610906565b34801561027c57600080fd5b5061013561028b3660046116d8565b6109b1565b600061029a610ad2565b6102a5858585610b4c565b90506102b46040860186611884565b90506000036102c6576102c685610c22565b6102cf82610cd6565b949350505050565b6102df610d23565b8281146103335760405162461bcd60e51b815260206004820152601360248201527f77726f6e67206172726179206c656e677468730000000000000000000000000060448201526064015b60405180910390fd5b60005b838110156103da576103c8858583818110610353576103536118cb565b905060200201602081019061036891906116d8565b600085858581811061037c5761037c6118cb565b905060200281019061038e9190611884565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610db092505050565b806103d2816118f7565b915050610336565b5050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361046e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161032a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104c97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105345760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161032a565b61053d81610e20565b6040805160008082526020820190925261055991839190610e28565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163460405160006040518083038185875af1925050503d80600081146105c9576040519150601f19603f3d011682016040523d82523d6000602084013e6105ce565b606091505b505090508061055957600080fd5b6105e4610fcd565b7f00000000000000000000000000000000000000000000000000000000000000006040517f205c28780000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107135760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161032a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661076e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107d95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161032a565b6107e282610e20565b6107ee82826001610e28565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108925760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161032a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6108bf610d23565b610900848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610db092505050565b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190611910565b905090565b600054610100900460ff16158080156109d15750600054600160ff909116105b806109eb5750303b1580156109eb575060005460ff166001145b610a5d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161032a565b6000805460ff191660011790558015610a80576000805461ff0019166101001790555b610a8982611031565b80156107ee576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b4a5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e7400000000604482015260640161032a565b565b600080610ba6846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050610bf6610bb9610140870187611884565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085939250506110ae9050565b6001546001600160a01b03908116911614610c15576001915050610c1b565b60009150505b9392505050565b60008054602083013591620100009091046bffffffffffffffffffffffff16906002610c4d83611929565b91906101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506bffffffffffffffffffffffff16146105595760405162461bcd60e51b815260206004820152601660248201527f6163636f756e743a20696e76616c6964206e6f6e636500000000000000000000604482015260640161032a565b801561055957604051600090339060001990849084818181858888f193505050503d80600081146103da576040519150601f19603f3d011682016040523d82523d6000602084013e6103da565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610d6457506001546001600160a01b031633145b610b4a5760405162461bcd60e51b815260206004820181905260248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74604482015260640161032a565b600080846001600160a01b03168484604051610dcc9190611978565b60006040518083038185875af1925050503d8060008114610e09576040519150601f19603f3d011682016040523d82523d6000602084013e610e0e565b606091505b5091509150816103da57805160208201fd5b610559610fcd565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610e6057610e5b836110d2565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610eba575060408051601f3d908101601f19168201909252610eb791810190611910565b60015b610f2c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161032a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610fc15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161032a565b50610e5b83838361119d565b6001546001600160a01b0316331480610fe557503330145b610b4a5760405162461bcd60e51b815260206004820152600a60248201527f6f6e6c79206f776e657200000000000000000000000000000000000000000000604482015260640161032a565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560405190917f000000000000000000000000000000000000000000000000000000000000000016907f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de90600090a350565b60008060006110bd85856111c2565b915091506110ca81611207565b509392505050565b6001600160a01b0381163b61114f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161032a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6111a68361136c565b6000825111806111b35750805b15610e5b5761090083836113ac565b60008082516041036111f85760208301516040840151606085015160001a6111ec878285856113d1565b94509450505050611200565b506000905060025b9250929050565b600081600481111561121b5761121b611994565b036112235750565b600181600481111561123757611237611994565b036112845760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161032a565b600281600481111561129857611298611994565b036112e55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161032a565b60038160048111156112f9576112f9611994565b036105595760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161032a565b611375816110d2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610c1b83836040518060600160405280602781526020016119de60279139611495565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611408575060009050600361148c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561145c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166114855760006001925092505061148c565b9150600090505b94509492505050565b6060600080856001600160a01b0316856040516114b29190611978565b600060405180830381855af49150503d80600081146114ed576040519150601f19603f3d011682016040523d82523d6000602084013e6114f2565b606091505b50915091506115038683838761150d565b9695505050505050565b6060831561157c578251600003611575576001600160a01b0385163b6115755760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161032a565b50816102cf565b6102cf83838151156115915781518083602001fd5b8060405162461bcd60e51b815260040161032a91906119aa565b6001600160a01b038116811461055957600080fd5b600080600080608085870312156115d657600080fd5b843567ffffffffffffffff8111156115ed57600080fd5b8501610160818803121561160057600080fd5b9350602085013592506040850135611617816115ab565b9396929550929360600135925050565b60008083601f84011261163957600080fd5b50813567ffffffffffffffff81111561165157600080fd5b6020830191508360208260051b850101111561120057600080fd5b6000806000806040858703121561168257600080fd5b843567ffffffffffffffff8082111561169a57600080fd5b6116a688838901611627565b909650945060208701359150808211156116bf57600080fd5b506116cc87828801611627565b95989497509550505050565b6000602082840312156116ea57600080fd5b8135610c1b816115ab565b6000806040838503121561170857600080fd5b8235611713816115ab565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561174a57600080fd5b8235611755816115ab565b9150602083013567ffffffffffffffff8082111561177257600080fd5b818501915085601f83011261178657600080fd5b81358181111561179857611798611721565b604051601f8201601f19908116603f011681019083821181831017156117c0576117c0611721565b816040528281528860208487010111156117d957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806060858703121561181157600080fd5b843561181c816115ab565b935060208501359250604085013567ffffffffffffffff8082111561184057600080fd5b818701915087601f83011261185457600080fd5b81358181111561186357600080fd5b88602082850101111561187557600080fd5b95989497505060200194505050565b6000808335601e1984360301811261189b57600080fd5b83018035915067ffffffffffffffff8211156118b657600080fd5b60200191503681900382131561120057600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611909576119096118e1565b5060010190565b60006020828403121561192257600080fd5b5051919050565b60006bffffffffffffffffffffffff80831681810361194a5761194a6118e1565b6001019392505050565b60005b8381101561196f578181015183820152602001611957565b50506000910152565b6000825161198a818460208701611954565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b60208152600082518060208401526119c9816040850160208701611954565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206dfbeeda46273e3e8d0064fa5ecaccd8bc1d5bb52b14ed8efc10f562f24c697964736f6c63430008120033";

type SimpleAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleAccount__factory extends ContractFactory {
  constructor(...args: SimpleAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    anEntryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleAccount> {
    return super.deploy(
      anEntryPoint,
      overrides || {}
    ) as Promise<SimpleAccount>;
  }
  override getDeployTransaction(
    anEntryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(anEntryPoint, overrides || {});
  }
  override attach(address: string): SimpleAccount {
    return super.attach(address) as SimpleAccount;
  }
  override connect(signer: Signer): SimpleAccount__factory {
    return super.connect(signer) as SimpleAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleAccountInterface {
    return new utils.Interface(_abi) as SimpleAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleAccount {
    return new Contract(address, _abi, signerOrProvider) as SimpleAccount;
  }
}
